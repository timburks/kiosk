// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go_gapic. DO NOT EDIT.

package gapic

import (
	"context"
	"fmt"
	"math"

	gax "github.com/googleapis/gax-go/v2"
	kioskpb "github.com/googleapis/kiosk/rpc"
	"google.golang.org/api/option"
	"google.golang.org/api/option/internaloption"
	gtransport "google.golang.org/api/transport/grpc"
	"google.golang.org/grpc"
	"google.golang.org/grpc/metadata"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

var newDisplayClientHook clientHook

// DisplayCallOptions contains the retry settings for each method of DisplayClient.
type DisplayCallOptions struct {
	CreateKiosk          []gax.CallOption
	ListKiosks           []gax.CallOption
	GetKiosk             []gax.CallOption
	DeleteKiosk          []gax.CallOption
	CreateSign           []gax.CallOption
	ListSigns            []gax.CallOption
	GetSign              []gax.CallOption
	DeleteSign           []gax.CallOption
	SetSignIdForKioskIds []gax.CallOption
	GetSignIdForKioskId  []gax.CallOption
	GetSignIdsForKioskId []gax.CallOption
}

func defaultDisplayGRPCClientOptions() []option.ClientOption {
	return []option.ClientOption{
		internaloption.WithDefaultEndpoint("localhost:443"),
		internaloption.WithDefaultMTLSEndpoint("localhost:443"),
		internaloption.WithDefaultAudience("https://localhost/"),
		internaloption.WithDefaultScopes(DefaultAuthScopes()...),
		internaloption.EnableJwtWithScope(),
		option.WithGRPCDialOption(grpc.WithDefaultCallOptions(
			grpc.MaxCallRecvMsgSize(math.MaxInt32))),
	}
}

func defaultDisplayCallOptions() *DisplayCallOptions {
	return &DisplayCallOptions{
		CreateKiosk:          []gax.CallOption{},
		ListKiosks:           []gax.CallOption{},
		GetKiosk:             []gax.CallOption{},
		DeleteKiosk:          []gax.CallOption{},
		CreateSign:           []gax.CallOption{},
		ListSigns:            []gax.CallOption{},
		GetSign:              []gax.CallOption{},
		DeleteSign:           []gax.CallOption{},
		SetSignIdForKioskIds: []gax.CallOption{},
		GetSignIdForKioskId:  []gax.CallOption{},
		GetSignIdsForKioskId: []gax.CallOption{},
	}
}

// internalDisplayClient is an interface that defines the methods available from .
type internalDisplayClient interface {
	Close() error
	setGoogleClientInfo(...string)
	Connection() *grpc.ClientConn
	CreateKiosk(context.Context, *kioskpb.Kiosk, ...gax.CallOption) (*kioskpb.Kiosk, error)
	ListKiosks(context.Context, *emptypb.Empty, ...gax.CallOption) (*kioskpb.ListKiosksResponse, error)
	GetKiosk(context.Context, *kioskpb.GetKioskRequest, ...gax.CallOption) (*kioskpb.Kiosk, error)
	DeleteKiosk(context.Context, *kioskpb.DeleteKioskRequest, ...gax.CallOption) error
	CreateSign(context.Context, *kioskpb.Sign, ...gax.CallOption) (*kioskpb.Sign, error)
	ListSigns(context.Context, *emptypb.Empty, ...gax.CallOption) (*kioskpb.ListSignsResponse, error)
	GetSign(context.Context, *kioskpb.GetSignRequest, ...gax.CallOption) (*kioskpb.Sign, error)
	DeleteSign(context.Context, *kioskpb.DeleteSignRequest, ...gax.CallOption) error
	SetSignIdForKioskIds(context.Context, *kioskpb.SetSignIdForKioskIdsRequest, ...gax.CallOption) error
	GetSignIdForKioskId(context.Context, *kioskpb.GetSignIdForKioskIdRequest, ...gax.CallOption) (*kioskpb.GetSignIdResponse, error)
	GetSignIdsForKioskId(context.Context, *kioskpb.GetSignIdForKioskIdRequest, ...gax.CallOption) (kioskpb.Display_GetSignIdsForKioskIdClient, error)
}

// DisplayClient is a client for interacting with .
// Methods, except Close, may be called concurrently. However, fields must not be modified concurrently with method calls.
type DisplayClient struct {
	// The internal transport-dependent client.
	internalClient internalDisplayClient

	// The call options for this service.
	CallOptions *DisplayCallOptions
}

// Wrapper methods routed to the internal client.

// Close closes the connection to the API service. The user should invoke this when
// the client is no longer required.
func (c *DisplayClient) Close() error {
	return c.internalClient.Close()
}

// setGoogleClientInfo sets the name and version of the application in
// the `x-goog-api-client` header passed on each request. Intended for
// use by Google-written clients.
func (c *DisplayClient) setGoogleClientInfo(keyval ...string) {
	c.internalClient.setGoogleClientInfo(keyval...)
}

// Connection returns a connection to the API service.
//
// Deprecated: Connections are now pooled so this method does not always
// return the same resource.
func (c *DisplayClient) Connection() *grpc.ClientConn {
	return c.internalClient.Connection()
}

// CreateKiosk create a kiosk. This enrolls the kiosk for sign display.
func (c *DisplayClient) CreateKiosk(ctx context.Context, req *kioskpb.Kiosk, opts ...gax.CallOption) (*kioskpb.Kiosk, error) {
	return c.internalClient.CreateKiosk(ctx, req, opts...)
}

// ListKiosks list active kiosks.
func (c *DisplayClient) ListKiosks(ctx context.Context, req *emptypb.Empty, opts ...gax.CallOption) (*kioskpb.ListKiosksResponse, error) {
	return c.internalClient.ListKiosks(ctx, req, opts...)
}

// GetKiosk get a kiosk.
func (c *DisplayClient) GetKiosk(ctx context.Context, req *kioskpb.GetKioskRequest, opts ...gax.CallOption) (*kioskpb.Kiosk, error) {
	return c.internalClient.GetKiosk(ctx, req, opts...)
}

// DeleteKiosk delete a kiosk.
func (c *DisplayClient) DeleteKiosk(ctx context.Context, req *kioskpb.DeleteKioskRequest, opts ...gax.CallOption) error {
	return c.internalClient.DeleteKiosk(ctx, req, opts...)
}

// CreateSign create a sign. This enrolls the sign for sign display.
func (c *DisplayClient) CreateSign(ctx context.Context, req *kioskpb.Sign, opts ...gax.CallOption) (*kioskpb.Sign, error) {
	return c.internalClient.CreateSign(ctx, req, opts...)
}

// ListSigns list active signs.
func (c *DisplayClient) ListSigns(ctx context.Context, req *emptypb.Empty, opts ...gax.CallOption) (*kioskpb.ListSignsResponse, error) {
	return c.internalClient.ListSigns(ctx, req, opts...)
}

// GetSign get a sign.
func (c *DisplayClient) GetSign(ctx context.Context, req *kioskpb.GetSignRequest, opts ...gax.CallOption) (*kioskpb.Sign, error) {
	return c.internalClient.GetSign(ctx, req, opts...)
}

// DeleteSign delete a sign.
func (c *DisplayClient) DeleteSign(ctx context.Context, req *kioskpb.DeleteSignRequest, opts ...gax.CallOption) error {
	return c.internalClient.DeleteSign(ctx, req, opts...)
}

// SetSignIdForKioskIds set a sign for display on one or more kiosks.
func (c *DisplayClient) SetSignIdForKioskIds(ctx context.Context, req *kioskpb.SetSignIdForKioskIdsRequest, opts ...gax.CallOption) error {
	return c.internalClient.SetSignIdForKioskIds(ctx, req, opts...)
}

// GetSignIdForKioskId get the sign that should be displayed on a kiosk.
func (c *DisplayClient) GetSignIdForKioskId(ctx context.Context, req *kioskpb.GetSignIdForKioskIdRequest, opts ...gax.CallOption) (*kioskpb.GetSignIdResponse, error) {
	return c.internalClient.GetSignIdForKioskId(ctx, req, opts...)
}

// GetSignIdsForKioskId get signs that should be displayed on a kiosk. Streams.
func (c *DisplayClient) GetSignIdsForKioskId(ctx context.Context, req *kioskpb.GetSignIdForKioskIdRequest, opts ...gax.CallOption) (kioskpb.Display_GetSignIdsForKioskIdClient, error) {
	return c.internalClient.GetSignIdsForKioskId(ctx, req, opts...)
}

// displayGRPCClient is a client for interacting with  over gRPC transport.
//
// Methods, except Close, may be called concurrently. However, fields must not be modified concurrently with method calls.
type displayGRPCClient struct {
	// Connection pool of gRPC connections to the service.
	connPool gtransport.ConnPool

	// flag to opt out of default deadlines via GOOGLE_API_GO_EXPERIMENTAL_DISABLE_DEFAULT_DEADLINE
	disableDeadlines bool

	// Points back to the CallOptions field of the containing DisplayClient
	CallOptions **DisplayCallOptions

	// The gRPC API client.
	displayClient kioskpb.DisplayClient

	// The x-goog-* metadata to be sent with each request.
	xGoogMetadata metadata.MD
}

// NewDisplayClient creates a new display client based on gRPC.
// The returned client must be Closed when it is done being used to clean up its underlying connections.
func NewDisplayClient(ctx context.Context, opts ...option.ClientOption) (*DisplayClient, error) {
	clientOpts := defaultDisplayGRPCClientOptions()
	if newDisplayClientHook != nil {
		hookOpts, err := newDisplayClientHook(ctx, clientHookParams{})
		if err != nil {
			return nil, err
		}
		clientOpts = append(clientOpts, hookOpts...)
	}

	disableDeadlines, err := checkDisableDeadlines()
	if err != nil {
		return nil, err
	}

	connPool, err := gtransport.DialPool(ctx, append(clientOpts, opts...)...)
	if err != nil {
		return nil, err
	}
	client := DisplayClient{CallOptions: defaultDisplayCallOptions()}

	c := &displayGRPCClient{
		connPool:         connPool,
		disableDeadlines: disableDeadlines,
		displayClient:    kioskpb.NewDisplayClient(connPool),
		CallOptions:      &client.CallOptions,
	}
	c.setGoogleClientInfo()

	client.internalClient = c

	return &client, nil
}

// Connection returns a connection to the API service.
//
// Deprecated: Connections are now pooled so this method does not always
// return the same resource.
func (c *displayGRPCClient) Connection() *grpc.ClientConn {
	return c.connPool.Conn()
}

// setGoogleClientInfo sets the name and version of the application in
// the `x-goog-api-client` header passed on each request. Intended for
// use by Google-written clients.
func (c *displayGRPCClient) setGoogleClientInfo(keyval ...string) {
	kv := append([]string{"gl-go", versionGo()}, keyval...)
	kv = append(kv, "gapic", getVersionClient(), "gax", gax.Version, "grpc", grpc.Version)
	c.xGoogMetadata = metadata.Pairs("x-goog-api-client", gax.XGoogHeader(kv...))
}

// Close closes the connection to the API service. The user should invoke this when
// the client is no longer required.
func (c *displayGRPCClient) Close() error {
	return c.connPool.Close()
}

func (c *displayGRPCClient) CreateKiosk(ctx context.Context, req *kioskpb.Kiosk, opts ...gax.CallOption) (*kioskpb.Kiosk, error) {
	ctx = insertMetadata(ctx, c.xGoogMetadata)
	opts = append((*c.CallOptions).CreateKiosk[0:len((*c.CallOptions).CreateKiosk):len((*c.CallOptions).CreateKiosk)], opts...)
	var resp *kioskpb.Kiosk
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.displayClient.CreateKiosk(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *displayGRPCClient) ListKiosks(ctx context.Context, req *emptypb.Empty, opts ...gax.CallOption) (*kioskpb.ListKiosksResponse, error) {
	ctx = insertMetadata(ctx, c.xGoogMetadata)
	opts = append((*c.CallOptions).ListKiosks[0:len((*c.CallOptions).ListKiosks):len((*c.CallOptions).ListKiosks)], opts...)
	var resp *kioskpb.ListKiosksResponse
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.displayClient.ListKiosks(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *displayGRPCClient) GetKiosk(ctx context.Context, req *kioskpb.GetKioskRequest, opts ...gax.CallOption) (*kioskpb.Kiosk, error) {
	md := metadata.Pairs("x-goog-request-params", fmt.Sprintf("%s=%v", "id", req.GetId()))

	ctx = insertMetadata(ctx, c.xGoogMetadata, md)
	opts = append((*c.CallOptions).GetKiosk[0:len((*c.CallOptions).GetKiosk):len((*c.CallOptions).GetKiosk)], opts...)
	var resp *kioskpb.Kiosk
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.displayClient.GetKiosk(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *displayGRPCClient) DeleteKiosk(ctx context.Context, req *kioskpb.DeleteKioskRequest, opts ...gax.CallOption) error {
	md := metadata.Pairs("x-goog-request-params", fmt.Sprintf("%s=%v", "id", req.GetId()))

	ctx = insertMetadata(ctx, c.xGoogMetadata, md)
	opts = append((*c.CallOptions).DeleteKiosk[0:len((*c.CallOptions).DeleteKiosk):len((*c.CallOptions).DeleteKiosk)], opts...)
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		_, err = c.displayClient.DeleteKiosk(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	return err
}

func (c *displayGRPCClient) CreateSign(ctx context.Context, req *kioskpb.Sign, opts ...gax.CallOption) (*kioskpb.Sign, error) {
	ctx = insertMetadata(ctx, c.xGoogMetadata)
	opts = append((*c.CallOptions).CreateSign[0:len((*c.CallOptions).CreateSign):len((*c.CallOptions).CreateSign)], opts...)
	var resp *kioskpb.Sign
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.displayClient.CreateSign(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *displayGRPCClient) ListSigns(ctx context.Context, req *emptypb.Empty, opts ...gax.CallOption) (*kioskpb.ListSignsResponse, error) {
	ctx = insertMetadata(ctx, c.xGoogMetadata)
	opts = append((*c.CallOptions).ListSigns[0:len((*c.CallOptions).ListSigns):len((*c.CallOptions).ListSigns)], opts...)
	var resp *kioskpb.ListSignsResponse
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.displayClient.ListSigns(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *displayGRPCClient) GetSign(ctx context.Context, req *kioskpb.GetSignRequest, opts ...gax.CallOption) (*kioskpb.Sign, error) {
	md := metadata.Pairs("x-goog-request-params", fmt.Sprintf("%s=%v", "id", req.GetId()))

	ctx = insertMetadata(ctx, c.xGoogMetadata, md)
	opts = append((*c.CallOptions).GetSign[0:len((*c.CallOptions).GetSign):len((*c.CallOptions).GetSign)], opts...)
	var resp *kioskpb.Sign
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.displayClient.GetSign(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *displayGRPCClient) DeleteSign(ctx context.Context, req *kioskpb.DeleteSignRequest, opts ...gax.CallOption) error {
	md := metadata.Pairs("x-goog-request-params", fmt.Sprintf("%s=%v", "id", req.GetId()))

	ctx = insertMetadata(ctx, c.xGoogMetadata, md)
	opts = append((*c.CallOptions).DeleteSign[0:len((*c.CallOptions).DeleteSign):len((*c.CallOptions).DeleteSign)], opts...)
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		_, err = c.displayClient.DeleteSign(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	return err
}

func (c *displayGRPCClient) SetSignIdForKioskIds(ctx context.Context, req *kioskpb.SetSignIdForKioskIdsRequest, opts ...gax.CallOption) error {
	md := metadata.Pairs("x-goog-request-params", fmt.Sprintf("%s=%v", "sign_id", req.GetSignId()))

	ctx = insertMetadata(ctx, c.xGoogMetadata, md)
	opts = append((*c.CallOptions).SetSignIdForKioskIds[0:len((*c.CallOptions).SetSignIdForKioskIds):len((*c.CallOptions).SetSignIdForKioskIds)], opts...)
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		_, err = c.displayClient.SetSignIdForKioskIds(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	return err
}

func (c *displayGRPCClient) GetSignIdForKioskId(ctx context.Context, req *kioskpb.GetSignIdForKioskIdRequest, opts ...gax.CallOption) (*kioskpb.GetSignIdResponse, error) {
	md := metadata.Pairs("x-goog-request-params", fmt.Sprintf("%s=%v", "kiosk_id", req.GetKioskId()))

	ctx = insertMetadata(ctx, c.xGoogMetadata, md)
	opts = append((*c.CallOptions).GetSignIdForKioskId[0:len((*c.CallOptions).GetSignIdForKioskId):len((*c.CallOptions).GetSignIdForKioskId)], opts...)
	var resp *kioskpb.GetSignIdResponse
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.displayClient.GetSignIdForKioskId(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *displayGRPCClient) GetSignIdsForKioskId(ctx context.Context, req *kioskpb.GetSignIdForKioskIdRequest, opts ...gax.CallOption) (kioskpb.Display_GetSignIdsForKioskIdClient, error) {
	ctx = insertMetadata(ctx, c.xGoogMetadata)
	var resp kioskpb.Display_GetSignIdsForKioskIdClient
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.displayClient.GetSignIdsForKioskId(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}
